// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Elevation.h"
#include "../Robotmap.h"
#include "../OI.h"
#include "WPILib.h"
#include "../Robot.h"
Elevation::Elevation() :
	Subsystem("Elevation") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	spd1 = RobotMap::elevationSpd1;
	qenc = RobotMap::elevationqenc;
	bottomLimit = RobotMap::bottomLimit;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Elevation::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Elevation::Up(float value) {
	if (Robot::elevation->qenc->Get() < 4000) {
		spd1->Set(value);
	} else {
		spd1->Set(0.0f);
	}

}
void Elevation::Down(float value) {
	printf("Down %d",bottomLimit->Get());
	float setval = 0.0f;
	if (Robot::elevation->qenc->Get() > 250) {
		setval = value;
	} else {
		setval = 0.1f;
	}
	if (bottomLimit->Get()==0) {
		Robot::elevation->qenc->Reset();
		setval = 0.0f;
		
	}
	spd1->Set(setval);
}
void Elevation::Stop() {
	spd1->Set(0.0);
	printf("%d\n", Robot::elevation->qenc->Get());
}
